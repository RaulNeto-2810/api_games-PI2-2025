// Middleware centralizado para tratamento de erros
const errorHandler = (err, req, res, next) => {
    console.error('üî¥ Erro capturado:', err)

    // Erro de ID inv√°lido do MongoDB/Mongoose
    if (err.name === 'CastError') {
        return res.status(400).json({
            erro: 'ID inv√°lido',
            message: 'O ID fornecido n√£o possui um formato v√°lido',
            timestamp: new Date().toISOString()
        })
    }

    // Erro de valida√ß√£o do Mongoose
    if (err.name === 'ValidationError') {
        const errors = {}
        Object.keys(err.errors).forEach(key => {
            errors[key] = err.errors[key].message
        })

        return res.status(400).json({
            erro: 'Valida√ß√£o falhou',
            message: 'Os dados fornecidos n√£o passaram na valida√ß√£o',
            detalhes: errors,
            timestamp: new Date().toISOString()
        })
    }

    // Erro de duplica√ß√£o (ex: email j√° existe)
    if (err.code === 11000) {
        const field = Object.keys(err.keyValue)[0]
        return res.status(409).json({
            erro: 'Recurso duplicado',
            message: `${field} j√° existe no sistema`,
            field: field,
            timestamp: new Date().toISOString()
        })
    }

    // Erro de JSON malformado
    if (err instanceof SyntaxError && err.status === 400 && 'body' in err) {
        return res.status(400).json({
            erro: 'JSON inv√°lido',
            message: 'O corpo da requisi√ß√£o cont√©m JSON malformado',
            timestamp: new Date().toISOString()
        })
    }

    // Erro interno do servidor (gen√©rico)
    res.status(500).json({
        erro: 'Erro interno do servidor',
        message: 'Algo deu errado no servidor. Tente novamente mais tarde.',
        timestamp: new Date().toISOString()
    })
}

module.exports = errorHandler